generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IndexStatus {
  PENDING
  INDEXING
  INDEXED
  FAILED
}

model User {
  id               String               @id @default(uuid())
  name             String
  email            String               @unique
  password         String
  verificationCode String?
  isVerified       Boolean              @default(false)
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  organizations    OrganizationMember[]
  refreshTokens    RefreshToken[]
}

model Organization {
  id                 String                @id @default(uuid())
  name               String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  members            OrganizationMember[]
  agents             Agent[]
  contacts           Contact[]
  conversations      Conversation[]
  knowedgeIndexes    AgentKnowledgeIndex[]
  agentKnowledgeDocs AgentKnowledge[]
  twilioConfig       AgentTwilio[]
  agentTools         AgentTools[]
}

model OrganizationMember {
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  users          User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Agent {
  id             String           @id @default(uuid())
  name           String
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  tools          AgentTools?
  knowledge      AgentKnowledge[]
  contacts       Contact[]
  conversations  Conversation[]
  twilio         AgentTwilio?

  @@index([organizationId])
}

model AgentTools {
  agentId        String       @id @unique
  agent          Agent        @relation(fields: [agentId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  cal            Json?
  calendly       Json?
  mcp            Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model AgentTwilio {
  agentId        String       @id @unique
  agent          Agent        @relation(fields: [agentId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  accountSid     String
  authToken      String
  phoneNumber    String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model AgentKnowledge {
  id             String                @id @default(uuid())
  agentId        String
  organizationId String
  organization   Organization          @relation(fields: [organizationId], references: [id])
  agent          Agent                 @relation(fields: [agentId], references: [id])
  file           String
  indexStatus    IndexStatus           @default(PENDING)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  indexes        AgentKnowledgeIndex[]
}

model AgentKnowledgeIndex {
  id               String         @id @default(uuid())
  organizationId   String
  organization     Organization   @relation(fields: [organizationId], references: [id])
  agentKnowledgeId String
  agentKnowledge   AgentKnowledge @relation(fields: [agentKnowledgeId], references: [id])
  referenceImage   String
  referenceText    String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Contact {
  id             String         @id @default(uuid())
  agentId        String
  agent          Agent          @relation(fields: [agentId], references: [id])
  name           String?
  company        String?
  email          String?
  ipAddress      String?
  phone          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  conversations  Conversation[]
}

model Conversation {
  id              String       @id @default(uuid())
  agentId         String
  agent           Agent        @relation(fields: [agentId], references: [id])
  contactId       String
  contact         Contact      @relation(fields: [contactId], references: [id])
  messages        Json         @default("[]")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  humanTakeoverAt DateTime?
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
}
